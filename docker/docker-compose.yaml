version: '3.9'

services:
  nginx:
    container_name: front
    image: 192.168.10.34:8082/dagestanfront:latest
    restart: always
    ports:
      - "80:80"
      - "443:443"
    command:  "/bin/sh -c 'nginx -g \"daemon off;\"'"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./logs:/var/log/nginx/
      - ./fifan_static:/var/www/static/
      - ./fifan_media:/var/www/media/
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot

  certbot:
    container_name: certbot
    image: certbot/certbot
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot

  db:
    container_name: postgresql
    image: postgres:15.3-alpine3.18
    restart: always
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    expose:
      - "5432"
    healthcheck:
      test: pg_isready -U postgres
      interval: 2s
      timeout: 3s
      retries: 40

  backend:
    container_name: backend
    image: 192.168.10.34:8082/dagestanback:latest
    env_file: .env
      #command: sh -c "
      #python manage.py collectstatic --noinput &&
      #python manage.py migrate &&
      #python manage.py runserver 0.0.0.0:8000"
    command: sh -c "
      chmod +x /dagestan/start-web.sh &&
      /dagestan/start-web.sh"
    volumes:
      - logs:/logs/
      - static:/dagestan/static/
      - media:/media/
    depends_on:
      - db
    expose:
      - "8000"

  redis:
    container_name: redis
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    env_file: .env
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_data:/var/lib/redis
    depends_on:
      - db
    expose:
      - "6379"

  celery:
    container_name: celery
    image: 192.168.10.34:8082/dagestanback:latest
    env_file: .env
    command: "celery --app=app.celery.app worker -l INFO --max-tasks-per-child=117"
    environment:
      BROKER_URL: "redis://:${REDIS_PASSWORD}@${REDIS_HOST}:${REDIS_PORT}/${CELERY_BROKER_DB}"
    volumes:
      - app:/app/
      - logs:/logs/
    depends_on:
      - redis
      - db

  celery-flower:
    container_name: celery-flower
    image: 192.168.10.34:8082/dagestanback:latest
    env_file: .env
    command: "celery --broker=redis://:${REDIS_PASSWORD}@${REDIS_HOST}:${REDIS_PORT}/${CELERY_BROKER_DB} flower --port=5555"
    volumes:
      - app:/app/
    depends_on:
      - celery

  node-exporter:
    image: prom/node-exporter
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"

volumes:
  pgdata:
  media:
  static:
  redis_data:
  logs:
  app:
